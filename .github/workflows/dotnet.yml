name: .NET

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      release:
        description: 'Description'     
        required: true
        default: 'release'
jobs:
  SelectEnvironment:
    name: Select environment to deploy
    runs-on: ubuntu-latest
    outputs:
      server: ${{ steps.set-env.outputs.env }}
    steps:
      - uses: actions/checkout@v2
      - name: Set env vars (dev)
        if: endsWith(github.ref, '/develop')
        env:
          SERVER: Staging
      - name: Set env vars (prod)
        if: endsWith(github.ref, '/main')
        env:
          SERVER: Prod
      - id: set-env
        name: set output environment
        run: echo "::set-output name=env::$SERVER" 

  Deploy:
    needs: SelectEnvironment
    name: Deploy
    runs-on: ubuntu-latest
    environment: ${{needs.SelectEnvironment.outputs.server}}
    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET
      uses: actions/setup-dotnet@v1
      with:
        dotnet-version: 3.1.x
    - name: cd api source
      run: cd AWSServerless1
    - name: dotnet restore
      run: dotnet restore AWSServerless1/AWSServerless1.csproj
    - name: setup lambda
      run: dotnet tool install -g Amazon.Lambda.Tools
    - name: Deploy to Lambda
      env:
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_KEY: ${{ secrets.AWS_SECRET_KEY }}
        AWS_S3_BUCKET: ${{ secrets.S3_BUCKET }}
        REGION: ${{secrets.REGION}}
        STACK_NAME: ${{secrets.STACK_NAME}}
        TEMPLATE: ${{secrets.TEMPLATE}}
      run: dotnet lambda deploy-serverless $STACK_NAME --region $REGION --aws-access-key-id $AWS_ACCESS_KEY_ID --aws-secret-key $AWS_SECRET_KEY -c release -f netcoreapp3.1 -sb $AWS_S3_BUCKET -t $TEMPLATE
